using AMT.ReportingInterfaces.Export;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.IO;
using System.Linq;
using System.Text;
using System.Reflection;
using AMT.Logger;

namespace AMT.DataAccess.Export
{
    public class CSVExport :ExportBase
    {

        public CSVExport (ExportInfo item) : base(item) { }

        StreamWriter csvWriter = null;

        public String separator = ",";
       // public String separator = "\t";

        StringBuilder htmlBuilder = new StringBuilder();

        public override bool StartExport (DbDataReader input)
        {
           

            Boolean result = false;
            try
            {

                if (!IsReportStarted)
                {
                    using (csvWriter = new StreamWriter(Path.Combine(base.ExportItemsInfo.ReportDetails.ExportPath , base.ExportItemsInfo.ReportDetails.ReportName + ".csv"), false))
                    {
                        IsReportStarted = true;

                        if (base.ExportItemsInfo.ReportDetails.ProductName != null)
                        {
                           
                            htmlBuilder.AppendLine("Product Name:" + base.ExportItemsInfo.ReportDetails.ProductName);
                          
                        }

                        if (base.ExportItemsInfo.ReportDetails.ReportName != null)
                        {
                           
                            htmlBuilder.AppendLine ("Report Name:" + base.ExportItemsInfo.ReportDetails.ReportName);
                         
                        }



                        if (base.ExportItemsInfo.ReportDetails.ReportDate != null)
                        {
                            htmlBuilder.AppendLine("Date:" + base.ExportItemsInfo.ReportDetails.ReportDate);
                         
                        }

                        if (base.ExportItemsInfo.ReportDetails.GeneratorName != null)
                        {
                           
                            htmlBuilder.AppendLine("Generated By:" + base.ExportItemsInfo.ReportDetails.GeneratorName);
                            
                        }


                        if (ExportItemsInfo.ReportDetails.ReportHeaders != null)
                        {
                           
                            foreach (var item in base.ExportItemsInfo.ReportDetails.ReportHeaders)
                            {
                              
                                htmlBuilder.AppendLine(item.Name + ":" + item.Value);

                              
                            }

                          
                        }

                        for (int i = 0; i < input.VisibleFieldCount; i++)
                        {
                          
                            htmlBuilder.Append(input.GetName(i) + separator);
                          
                        }

                        csvWriter.WriteLine(htmlBuilder.ToString ());
                    }

                }

            }
            catch (Exception ex)
            {

                AMTLogger.WriteToLog(ex.Message, MethodBase.GetCurrentMethod().Name, 0, AMTLogger.LogInfo.Error);
            }

            return result;
        }

        public override bool ExportReportData (DbDataReader input)
        {
            Boolean result = false;
            try
            {
                htmlBuilder = new StringBuilder();

                using (csvWriter = new StreamWriter(Path.Combine(base.ExportItemsInfo.ReportDetails.ExportPath, base.ExportItemsInfo.ReportDetails.ReportName + ".csv"), true))
                {
                    for (int i = 0; i < input.VisibleFieldCount; i++)
                    {



                        htmlBuilder.Append(input.GetValue(i).ToString() + separator);

                        //}


                    }

                    csvWriter.WriteLine(htmlBuilder.ToString());
                }
            }
            catch (Exception ex)
            {

                AMTLogger.WriteToLog(ex.Message, MethodBase.GetCurrentMethod().Name, 0, AMTLogger.LogInfo.Error);
            }

            return result;
        }

        public override bool EndExport ()
        {
            Boolean result = false;
            try
            {
                
            }
            catch (Exception ex)
            {

                AMTLogger.WriteToLog(ex.Message, MethodBase.GetCurrentMethod().Name, 0, AMTLogger.LogInfo.Error);
            }

            return result;
        }

        public override bool SaveReport ()
        {
            return true;
        }
    }
}
